إِن كانَ مَسعودٌ سَقى أَطلالَهُم
سَبَلَ الشُؤونِ فَلَستُ مِن مَسعودِ
ظَعَنوا فَكانَ بُكايَ حَولاً بَعدَهُم
ثُمَّ اِرعَوَيتُ وَذاكَ حُكمُ لَبيدِ :_أبوتمام

اي المشكله .. المشكله ان عندي الـthread اي الـthread ده ؟
الـthread ده يا سيدي عباره عن route طريق يعني بتشتغل فيه الـعمليات بتاعتي
زي اي العمليات دي ؟ زي الـfetchDataFromApi أو الـfetchDataFromDb او الـDrawUi
المشكله يا سيدي اني عندي طريق اسمه الـMainThread بيقولك والله ما يمشيش من عندي الا الـDrawUi بس طب يعم يهديك يرضيك طب انا لو حابب اعمل فيتش لداتا من api او من roomDb اعمل اي يقولك مش شغلي شوفلك طريق تاني
قعدنا نفكر ان احنا دلوقتي عندنا اكتر من عمليه وعندنا thread واحد شغالين عليه طب عايزين نشتغل علي threads تانيه ولو احنا اشتغلنا علي threads تانيه فاحنا محتاجين نخلي الـthread ده شغال طول الوقت فهنا جه مبدأ الـasynchronousProgramming
قعدنا نسأل طب عشان نهندل الموضوع ده محتاجين اي قالو محتاجين تلات حاجات
الأول الـthread ال هو الطريق ال بتشتغل فيه العمليه بتاعتي
التاني مفتاح بعمل stop او resume للعمليه
التالت control علي ال عمليه تهندل ليا الـerrors او غيرها

قعدنا نسأل طب اي ال بيهندل الموضوع ده في الـandroid  قالو لينا تلات libs
الاولي هي الـcallBack بتهندل موضوع الـstopResume ده بس عشان اروح للBackground Thread كنت بضطر اعمل thread جديده بس للاسف كانت بتضعب عليا عمليه الـcontrol
التانيه الـRXjava  تهندل موضوع الـstopResume عن طريق الـobserve ال هو لما ياجي ليك داتا اعمل كذا وال بيتحكم عندها في الـthread هما الـobserveOn والـsubscribeOn
وكنت بعملـcontrol عليها بالـDisposable
بس الحلين دول كانو مكلفين شوي
الي ان ظهرت الـCoroutine ودي بتحقق موضوع الـstopResume عن طريق الـsuspend
ولما سألنا الـCoroutine الي عندك بيوديني للـBackgroundThread قالتي الـDispatchers
طب وبعملـcontrol ازاي عن طريق الـscopes



 هنتكلم  عن الكوريوتين  ومذاكره كل الأمور ال بتكون بعيده بشكل أساسي عن الـui
 وبتهندل أجزاء معينة في الـOS مش بتكون سهله ولكن بتكون لذيذه وبتحسسك بعظمة مجال الـsoftware
 وانه مجال هندسي بامتياز بتحسسك بعظمة كلية الحاسبات واد اي ان المواد ال بتدرسها بتقصر عليك المسافه في فهم أمور كتير
 يعني مثلا موضوع زي ال معانا ده النهارده بيتكلم بشكل أساسي عن موضوع الـthreads وانواعها في الاندرويد وازاي تشتغل عليها ده كله في سبيل انك تحسن تجربه المستخدم والبيرفورمانس بتاعك


الكوريوتين :بتهندل الـtask ال مقدرش اعملها في الـMainThread وبتهندل الـconcurrentJobs
وهنا لازم تكون فاهم ان الكوريوتين عباره عن
ساسبيند أوف كود بمعني جزء من الكود اقدر اوقفه واشغله في اي وقت
وان هو ان كان شبه الـthread فهو مشـthread واكيد طبعا مش بيعملـthreads جديده

الـsuspend فانكشن :
بتدي للفانكشن القابليه انها تشتغل وتقف
مش مسئوله انها تودي اي تاسك في الباكجراوند ثريد
لازم تستدعيها من داخل suspend فانكشن تانيه او من داخل coroutine block or builder


الـparallelism :ان لكل تاسك thread هتشتغل عليه وده مُكلف للريسورس وخاصه ان التاسك مش هتكون شغاله طول الوقت زي مثلا عندي callApi
الاولي الفانكشن ال بتعمل callApi
الثانيه سبينر بيتعرض علي مالداتا تيجي
الثالثه الresponse ال راجع مستنيه عشان اعرضه

الـconcurrency :احسن طريقه اطبق بيها مفهوم الـasynchronousProgramming
فكرته بسيطه اني لو عندي اكتر من تاسك فهما هيتنفذو علي نفس الـthread
ازاي ؟ عن طريق اني بتحكم في العمليه بمعني اني اشغل كل عمليه شوبه

تعالي الأول نتكلم عن الـScope ال بيشتغل فيها الـCoroutine
قالك عندي تلات سكوب
الأول الـGlobal Scope
التاني الـLifeCycle Scope
التالت الـViewModel Scope

وهنا هنتكلم عن مفهوم مهم الـDispatchers
الـDispatchers هي ال بتحدد أيـthread  اشغل فيه الـtask وكل الـDispatcher له تاسكات معينه بتشتغل فيه يعني مثلا مش معقول اروح للـMainthread ال مسئول عن الـui واعمل فيه callApi ال بتاخد وقت لان في الحاله دي ال هيحصل ان الui هتقف لحد مالريسبونس يرجع

عندي اولـDispatcher :الـMain للـui او الاشياء الخفيفه
عندي تانيـDispatcher :الـDefault لو محددتش ايـDispatcher هيشتغل فيه هيشغله هنا وهو مخصص للعمليات التقيله

عندي تالتـDispatcher : الـIO وده للعمليات زي هجيب حاجه من الداتابيز هfetch داتا من التapi
عندي رابعـDispatcher :الـUnconfined ده شغال بمزاجه
اخر شكل وهو شكل غريب شوي اني اعملthread واخليه يشتغل فيه
ومش عارف اي لازمتها حقيقه
globalScope.launch(newSingleThreadContext(name:"NAME")){}

طبعا فيه حاجه لازم تعرفها اني اقدر اعمل سويتش لـDispatcher تاني  يشتغل علي تاسك معينه من داخل scope ودي نقطه مهمه هتحتاج تركيزك
عن طريقه الـwithContext

بمعني ان لو عندي suspend فانكشن وعاوز اناديها من داخل الـMainThread  فالحل في الـwithContext
___
عشان أبدأ كوريوتين فأنا ببدأ عن طريق الـlaunch او عن طريق الـAsyncAwait طب اي الفرق بينهم الفرق ان
الـlaunch بترجع job
اب هو الـjob ده
انما الـAsyncAwait بترجع deferred اي هو الـdeferred تقدر تقول عباره عن الداتا الراجعه المخزنه كفاليو عشان دي مهمه
خلي بالك ان الغرض من الـlaunch والـAsyncAwait ان اتحكم في العمليات واخليهم يشتغلو parallel

الـdeferred بترجع الداتا كفاليو لكن الـchannel بترجع stream

__
الـliveData والـstateFlow
عيوب الـliveData :
بتشتغل حتي لو مفيش تغيير
لازم تشتغل في الـMainThread
مش مُحبب انها تشتغل من داخل الـrepo
وبالتالي الـstateFlow عكسها
بتـfire مع كل update
بتشتغل في الباكجراوند
لازم يكون ليها قيمه
بتستخدم الـFlowopreators زي الـmap والـfilter
ازاي اخليها aware lifecycle





//            runBlocking {
//                flow<Int> {
//                    for (i in 1..10) {
//                        emit(i) // send
//                        delay(1000)
//                        Log.d("here", i.toString())
//                    }
//                }
//                    .filter { i -> i < 5 }.buffer().collect {
//                        Log.d("here", it.toString())
//                        delay(1000)
//                    }
//            }
            runBlocking {


                val flow1 = flow<Int> {
                    for (i in 1..9) {
                        emit(i)
                    }
                }
                val flow2 = flow<String> {
                    for (i in listOf("A", "B", "C")) {
                        emit(i)
                    }
                }
                flow1.zip(flow2) { a: Int, b: String ->
                    "$a:$b"
                }.collect {
                    Log.i("here", it)
                }
            }
المصادر :
في الفيديوهان دول هما جزء من شرح الـcompose وهو شرح محترم بصراحه

https://www.youtube.com/watch?v=jGyskhCFHUQ&list=PLnphl9fhhiQ6GZ9MFCUp2HL4gHnB4YqtN&index=12&ab_channel=AndroidCookies
https://www.youtube.com/watch?v=6LqfbuqiOmI&list=PLnphl9fhhiQ6GZ9MFCUp2HL4gHnB4YqtN&index=13&ab_channel=AndroidCookies

في البلاليست دي الشرح واضح وهو مطبق علي الـxml
https://www.youtube.com/playlist?list=PLXjbGq0ERjFqGlzZFDMCHJA_PBvUIaIto

#androidNative
#kotlin
#jetpackCompose
#coroutine

//lifecycleScope.Launch{flow.buffer().flowWithLifecycle(lifecycle)
//chat
//BackPressure Explantion
//حل المشكله دي بالـbuffer
//flow.buffer
//زي الماسنجر لو قعدت فتره مش بتبتفتحه وقررت تفتحه هيجيب ليك اشعارات مره واحده
//state flow get lastValue

